name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Check
        run: ./gradlew check -x :integration-test-jdbc:check -x :integration-test-r2dbc:check

      - name: Upload reports
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ./**/build/reports

  integration-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dbms: [h2, mariadb, mysql, postgresql]
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Test
        # Skip mysql R2DBC test because the MySQL R2DBC driver is unstable.
        run: ./gradlew :integration-test-jdbc:${{ matrix.dbms }} :integration-test-r2dbc:${{ matrix.dbms }} -x :integration-test-r2dbc:mysql

      - name: Upload reports
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.dbms }}
          path: ./**/build/reports

  publish:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [ build, integration-test ]

    steps:
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Checkout
        uses: actions/checkout@v2

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set version
        id: set-version
        run: ./gradlew properties | grep "^version:" | awk '{print $2}' | { read v; echo "::set-output name=version::$v"; }

      - name: Print version
        run: echo ${{ steps.set-version.outputs.version }}

      - name: Publish packages
        run: ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_USERNAME }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}

      - name: Publish plugin
        if: endsWith(steps.set-version.outputs.version, 'SNAPSHOT') == false
        run: ./gradlew publishPlugins -Pgradle.publish.key=${{ secrets.GRADLE_PUBLISH_KEY }} -Pgradle.publish.secret=${{ secrets.GRADLE_PUBLISH_SECRET }}

      - name: Upload reports
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: publish
          path: ./**/build/reports
